package qna.domain;

import qna.CannotDeleteException;
import qna.domain.common.BaseEntity;

import javax.persistence.*;

@Entity
public class Question extends BaseEntity {
    /**
     * create table question
     * (
     * id         bigint generated by default as identity,
     * contents   clob,
     * created_at timestamp    not null,
     * deleted    boolean      not null,
     * title      varchar(100) not null,
     * updated_at timestamp,
     * writer_id  bigint,
     * primary key (id)
     * )
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Contents contents;

    @Embedded
    private Deletion deleted;

    @Embedded
    private Title title;

    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "writer_id", foreignKey = @ForeignKey(name = "fk_question_writer"))
    private User writer;

    @Embedded
    private Answers answers;

    public Question(String title, String contents) {
        this(null, title, contents);
    }

    public Question(Long id, String title, String contents) {
        this.id = id;
        this.title = new Title(title);
        this.contents = new Contents(contents);
        this.answers = new Answers();
        this.deleted = new Deletion();
    }

    public Question() {

    }

    public Question writeBy(User writer) {
        this.writer = writer;
        return this;
    }

    public void isOwner(User user) throws CannotDeleteException {
        if (!this.writer.equals(user)) {
            throw new CannotDeleteException("질문을 삭제할 권한이 없습니다.");
        }
    }

    public void addAnswer(Answer answer) {
        answers.add(answer);
    }

    public Long getId() {
        return id;
    }

    public boolean isDeleted() {
        return this.deleted.isDeleted();
    }

    public DeleteHistories delete(User user) throws CannotDeleteException {
        isOwner(user);
        this.deleted.delete();
        DeleteHistories deleteHistories = new DeleteHistories();
        deleteHistories.addHistory(new DeleteHistory(ContentType.QUESTION, this.getId(), user));
        deleteHistories.addHistories(answers.delete(user));
        return deleteHistories;
    }

    @Override
    public String toString() {
        return "Question{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", contents='" + contents + '\'' +
                ", writer=" + writer +
                ", deleted=" + deleted +
                '}';
    }
}
